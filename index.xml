<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Radiology ML Tutorials</title>
<link>https://radml.wfwiggins.com/index.html</link>
<atom:link href="https://radml.wfwiggins.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Interactive tutorials for AI applications in radiology</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 12 Jun 2024 01:37:14 GMT</lastBuildDate>
<item>
  <title>Radiology Report Labeling with Llama.cpp</title>
  <link>https://radml.wfwiggins.com/posts/llama-cpp-radiology-report-labeling.html</link>
  <description><![CDATA[ 




<p><a href="https://colab.research.google.com/github/wfwiggins/rad-ml-tutor/blob/master/_notebooks/2023-12-11-llama-cpp-radiology-report-labeling.ipynb" target="_parent"><img src="https://radml.wfwiggins.com/posts/https:/colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<blockquote class="blockquote">
<p><strong><em>Feel free to save a copy on your Google Drive before you begin.</em></strong></p>
</blockquote>
<p>Llama.cpp is a project led by Georgi Gerganov that was initially designed as a pure C/C++ implementation of the Llama large language model developed and open-sourced by Meta’s AI team.</p>
<p>Quoted from the llama.cpp GitHub repository:</p>
<blockquote class="blockquote">
<p>The main goal of llama.cpp is to run the LLaMA model using 4-bit integer quantization on a MacBook - Plain C/C++ implementation without dependencies - Apple silicon first-class citizen - optimized via ARM NEON, Accelerate and Metal frameworks - AVX, AVX2 and AVX512 support for x86 architectures - Mixed F16 / F32 precision - 2-bit, 3-bit, 4-bit, 5-bit, 6-bit and 8-bit integer quantization support - CUDA, Metal and OpenCL GPU backend support</p>
</blockquote>
<p>In lay terms, this means that we can implement these models in such a way that they can be run on nearly any physical or virtual machine! <strong>You don’t need an industrial-grade, multi-GPU server to use open-source LLMs locally.</strong></p>
<section id="when-to-use-an-llm-locally" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-an-llm-locally">When to Use an LLM Locally</h2>
<ul>
<li>You have sensitive data that you don’t want to send to OpenAI’s servers for them to potentially store and use for the training of futures models
<ul>
<li>Virtually all healthcare data</li>
</ul></li>
<li>You want to fine-tune an open-source LLM for a specific purpose</li>
</ul>
</section>
<section id="overview-of-this-module" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-this-module">Overview of This Module</h2>
<ol type="1">
<li>Install llama.cpp and Hugging Face Hub (to download model files)</li>
<li>Download the 7 billion parameter Llama2 model fine-tuned for chat</li>
<li>Engineer a prompt to have the LLM read a chest radiography report and return structured labels for specific findings in JSON format.</li>
<li>Test a few example reports on Llama2-7B-Chat.</li>
<li>Repeat the process for the Mistral-7B-Instruct-v0.1 model and compare the results.</li>
</ol>
<blockquote class="blockquote">
<p><em>Note: At the time this module was developed, Mistral-7B is the best open-source, 7B parameter model available. This field is moving very quickly, so this very well could change before the end of the year.</em></p>
</blockquote>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li>Llama.cpp on GitHub: https://github.com/ggerganov/llama.cpp</li>
<li>Meta AI’s Llama 2: https://ai.meta.com/llama/</li>
<li>MistralAI’s Mistral-7B: https://mistral.ai/news/announcing-mistral-7b/</li>
<li>HuggingFace Models:
<ul>
<li><a href="https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF">TheBloke/Llama-2-7B-Chat-GGUF</a></li>
<li><a href="https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-GGUF">TheBloke/Mistral-7B-Instruct-v0.1-GGUF</a></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><em>Note: If you would like to experiment with other models, please search for the “GGUF” version of the model on Hugging Face.</em></p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Install llama.cpp and HuggingFace Hub</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown This cell takes approximately 2 minutes to run. The output is suppressed, so if no error is shown, you may assume that it worked.</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>CMAKE_ARGS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-DLLAMA_CUBLAS=on"</span> FORCE_CMAKE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> pip install llama<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2.11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>force<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>reinstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>upgrade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>no<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cache<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install huggingface_hub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18.0</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Importing the necessary libraries</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hf_hub_download</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_cpp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Llama</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> regex <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> re</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span></code></pre></div>
</div>
<div class="cell" data-cellview="form">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Select the model you'd like to test</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown After initially testing with one model, if you would like to test another then you must change your selection in this cell. Then you will need to re-run this cell and all of the ones below it. You can do this from the `Runtime` menu bar by selecting `Run after`.</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama-2"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @param ["llama-2", "mistral"]</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama-2"</span>:</span>
<span id="cb3-8">    model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TheBloke/Llama-2-7b-Chat-GGUF"</span></span>
<span id="cb3-9">    model_basename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama-2-7b-chat.Q4_K_M.gguf"</span></span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-11">    model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TheBloke/Mistral-7B-Instruct-v0.1-GGUF"</span></span>
<span id="cb3-12">    model_basename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mistral-7b-instruct-v0.1.Q4_K_M.gguf"</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="4c2c4edd-c2a6-401e-a3a8-164534b0343b">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Download the model from Hugging Face Hub</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_hub_download(repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_name, filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_basename)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2f82a7190262438da11010c09dc6e201","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="3b6505b3-a8d0-4d87-fb29-95f19818d3f0">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Initialize the llama.cpp constructor</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feel free to play around with different hyperparameters below</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">lcpp_llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Llama(</span>
<span id="cb5-6">    model_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_path,</span>
<span id="cb5-7">    n_threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CPU cores</span></span>
<span id="cb5-8">    n_batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should be between 1 and n_ctx, consider the amount of VRAM in your GPU. Should be a power of 2.</span></span>
<span id="cb5-9">    n_gpu_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change this value based on your model and your GPU VRAM pool.</span></span>
<span id="cb5-10">    n_ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Context window = maximum input sequence length (in tokens)</span></span>
<span id="cb5-11">    n_gqa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb5-12">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>AVX = 1 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | </code></pre>
</div>
</div>
</section>
<section id="prompt-engineering" class="level2">
<h2 class="anchored" data-anchor-id="prompt-engineering">Prompt Engineering</h2>
<p>Prompt engineering has emerged as an important skill set in getting LLMs to execute your desired task. For this, you should know if there is a <strong>prompt template</strong></p>
<ol type="1">
<li>We start with a <code>system</code> prompt. This gives the LLM a role to play in the requests that follow.</li>
<li>We implement a JSON <code>schema</code> to prompt the LLM to return structured labels for each report we submit.</li>
<li>We provide a sample <code>report</code> for the LLM to analyze.</li>
<li>We construct the <code>prompt</code> that will present the report text to the model, ask it to use the JSON schema provided, and analyze the report for the findings included in the schema.</li>
<li>Finally, we utilize the <code>prompt templates</code> for the Llama-2-Chat and Mistral-7B-Instruct-v0.1 models to construct our complete prompt.</li>
</ol>
<blockquote class="blockquote">
<p><em>Note: Mistral-7B does not have a separate delimiter for the system role, so we pass that portion of the prompt with the remainder.</em></p>
</blockquote>
<p>For more details on prompt engineering, see this guide: <a href="https://www.promptingguide.ai/">Prompt Engineering Guide</a></p>
<div class="cell" data-cellview="form">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title System prompt</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown In your experimentation, you may change the text in the following field to see the effect the "system" prompt has on the model output.</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an expert radiologist's assistant, skilled in analyzing radiology reports. Please first provide a response to any specific requests. Then explain your reasoning."</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @param {type: "string"}</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Construct JSON schema</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "cardiomegaly": { "type": "boolean" },</span></span>
<span id="cb8-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "lung_opacity": { "type": "boolean" },</span></span>
<span id="cb8-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "pneumothorax": { "type": "boolean" },</span></span>
<span id="cb8-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "pleural_effusion": { "type": "boolean" },</span></span>
<span id="cb8-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "pulmonary_edema": { "type": "boolean" },</span></span>
<span id="cb8-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "abnormal_study": { "type": "boolean" }</span></span>
<span id="cb8-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</div>
<div class="cell" data-cellview="form">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Provide a sample chest radiograph report</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown A sample normal chest radiography report is provided for you here. If you would like to experiment, change the text in the field below and re-run this cell and the cells below.</span></span>
<span id="cb9-4"></span>
<span id="cb9-5">report_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No focal consolidation, pneumothorax, or pleural effusion. Cardiomediastinal silhouette is stable and unremarkable. No acute osseous abnormalities are identified. No acute cardiopulmonary abnormality."</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @param {type: "string"}</span></span></code></pre></div>
</div>
<div class="cell" data-cellview="form">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Construct User prompt</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown I've included an additional instruction here to help the model understand that there is some overlap between lung opacity and other categories. As you may see below, this can actually confuse some models.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown &lt;br&gt;&lt;br&gt;While some prompt engineering techniques can be helpful, you have to experiment to see what produces robust and consistent outputs.</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown &lt;br&gt;&lt;br&gt;You can delete the following text entirely if you do not want to provide additional instructions.</span></span>
<span id="cb10-6">additional_instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Note that 'lung_opacity' may include nodule, mass, atelectasis, or consolidation."</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @param {type:"string"}</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''</span></span>
<span id="cb10-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>report_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb10-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Please extract the findings from the preceding text radiology report using the following JSON schema:</span></span>
<span id="cb10-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>schema<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb10-12"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>additional_instructions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Llama-2-Chat &amp; Mistral-7B-Instruct-v0.1 prompt templates</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown Using the correct prompt formatting with special tokens like `[INST]` can greatly improve your chances of getting a good response from an LLM. If you're unsure of the appropriate template, check the model card on Hugging Face, or the website or original paper for the model you're using.</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">llama2_prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''[INST] &lt;&lt;SYS&gt;&gt;</span></span>
<span id="cb11-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>system<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;&lt;/SYS&gt;&gt;</span></span>
<span id="cb11-8"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[/INST]</span></span>
<span id="cb11-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-10"></span>
<span id="cb11-11">mistral_prompt_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''&lt;s&gt;[INST] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>system<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> [/INST]'''</span></span></code></pre></div>
</div>
<div class="cell" data-cellview="form" data-outputid="b1d74776-1901-41d2-ab19-e0a7b30e1397">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Generate LLM response and print response text</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama-2"</span>:</span>
<span id="cb12-4">    full_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llama2_prompt_template</span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-6">    full_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mistral_prompt_template</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown After initial testing, consider experimenting with some of the hyperparameters below.</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown - `max_tokens`: maximum model output</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown - `temperature`: a.k.a. entropy, increases randomness of output. Higher produces more human-like responses. `0` does not guarantee deterministic output.</span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown &lt;p&gt;See the LLM settings guide linked below for more details on experimenting with hyperparameters.</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">max_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"integer"}</span></span>
<span id="cb12-14">temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"slider", min:0, max:1, step:0.1}</span></span>
<span id="cb12-15">top_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"slider", min:0.8, max:1, step:0.05}</span></span>
<span id="cb12-16"></span>
<span id="cb12-17">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lcpp_llm(</span>
<span id="cb12-18">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>full_prompt,</span>
<span id="cb12-19">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_tokens,</span>
<span id="cb12-20">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temperature,</span>
<span id="cb12-21">    top_p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_p,</span>
<span id="cb12-22">    repeat_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,</span>
<span id="cb12-23">    top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb12-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># echo=True, # return the prompt</span></span>
<span id="cb12-25">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-26"></span>
<span id="cb12-27">res_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"choices"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>]</span>
<span id="cb12-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res_txt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Of course! I'd be happy to help you analyze the radiology report. Here are my findings based on the JSON schema provided:
{
"cardiomegaly": false,
"lung_opacity": true,
"pneumothorax": false,
"pleural_effusion": false,
"pulmonary_rama": false,
"abnormal_study": true
}
Explanation:
The report states that there is no focal consolidation, pneumothorax, or pleural effusion. However, it does mention that the cardiomediastinal silhouette is stable and unremarkable, which suggests that there are no signs of cardiac tamponade or other abnormalities in this area. Additionally, the report states that no acute osseous abnormalities were identified, which means that there are no bone fractures or dislocations present. Finally, the report concludes that there is an abnormal study, which indicates that something unusual was detected during the imaging process.
I hope this helps! Let me know if you have any further questions.</code></pre>
</div>
</div>
</section>
<section id="limitations-of-this-approach" class="level2">
<h2 class="anchored" data-anchor-id="limitations-of-this-approach">Limitations of this Approach</h2>
<ol type="1">
<li><strong>Errors:</strong> You may observe when using Llama-2-7B-Chat that the JSON returned is not ideal for what we requested or may even have an error like turning <code>pulmonary_edema</code> into <code>pulmonary_emia</code>.
<ul>
<li>This can be improved by simplifying your request for smaller models or using a model that is better trained for returning structured data in JSON format, like Mistral-7B.</li>
<li>Playing around with some of the model inference hyperparameters can also help. See this guide for further details: <a href="https://www.promptingguide.ai/introduction/settings">Prompt Engineering Guide: LLM Settings</a></li>
</ul></li>
<li><strong>Hallucinations:</strong> LLMs can provide very confident answers that are flat out wrong. You may see output like <code>"Under the 'lung_opacity' field, the report mentions that there is opacity in both lungs, which could indicate nodules, masses, atelectasis, or consolidation. Therefore, the value for this field is set to true."</code>, even when there is no mention of that in the report referenced!
<ul>
<li>This can be improved by careful prompt engineering. You may want to include in your <code>system prompt</code> an instruction to not return an answer if the model is not confident. Or you may want to try without having the model explain it’s reasoning.</li>
<li>A group at NIH found that asking Vicuna-13B to perform a single labeling task at one time provided more robust results in this article published in <em>Radiology</em>: <a href="https://pubs.rsna.org/doi/10.1148/radiol.231147">Feasibility of Using the Privacy-preserving Large Language Model Vicuna for Labeling Radiology Reports</a></li>
<li>For certain use cases, retrieval-augmented generation (RAG) can be helpful. We’ll cover that in the next notebook.</li>
<li>Finally, if all else fails and you have several hundred labeled examples of the task you want the LLM to perform, you may consider parameter-efficient fine-tuning (PEFT). See this guide from NVIDIA for more details: <a href="https://developer.nvidia.com/blog/selecting-large-language-model-customization-techniques/">Selecting LLM Customization Techniques</a></li>
</ul></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Define a function to postprocess the response text and extract the JSON object into a Python dict</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> json_from_str(s):</span>
<span id="cb14-4">    expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\{(?:[^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">]*|(?R))*\}'</span>)</span>
<span id="cb14-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr.findall(s)</span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json.loads(res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> res <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="210997d7-476d-4ad2-ed3a-54fc7961618a">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Assign an ID number to the report and associate extracted labels with the report ID</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-4">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_from_str(res_txt)</span>
<span id="cb15-5">result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>: labels}</span>
<span id="cb15-6">result_dict</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{1: {'cardiomegaly': False,
  'lung_opacity': True,
  'pneumothorax': False,
  'pleural_effusion': False,
  'pulmonary_rama': False,
  'abnormal_study': True}}</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://radml.wfwiggins.com/posts/llama-cpp-radiology-report-labeling.html</guid>
  <pubDate>Wed, 12 Jun 2024 01:37:14 GMT</pubDate>
</item>
<item>
  <title>Chat with the ACR Contrast Manual</title>
  <link>https://radml.wfwiggins.com/posts/ACR_contrast_manual_chat.html</link>
  <description><![CDATA[ 




<p><a href="https://colab.research.google.com/github/wfwiggins/rad-ml-tutor/blob/master/_notebooks/2023_12_12_ACR_contrast_manual_chat.ipynb" target="_parent"><img src="https://radml.wfwiggins.com/posts/https:/colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<blockquote class="blockquote">
<p><strong><em>Feel free to save a copy in your Google Drive before you begin.</em></strong> ### Using LLMs and retrieval-augmented generation (RAG)</p>
</blockquote>
<p><code>Retrieval-augmented generation (RAG)</code> is a method of querying existing data to improve the responses of large language models (LLMs) to questions requiring factual and/or specialized knowledge.</p>
<p>RAG is a two-step process where relevant information is first retrieved from a special database, called a <code>vector database</code>, that stores <code>chunks</code> of text along with the embeddings of that text, typically from a Transformer or LLM.</p>
<p>Encoding a question or prompt from a user with the same model used to generate the embeddings for the vector DB, one can use <code>similarity search</code> to find relevant chunks of text that can then be presented to an LLM as part of the prompt including the original question.</p>
<p>In this way, you can “chat” with any document or database you like. One popular application of this is <code>manual-as-a-service</code>.</p>
<section id="module-overview" class="level2">
<h2 class="anchored" data-anchor-id="module-overview">Module Overview</h2>
<p>In this module, we will: 1. Split the <a href="https://www.acr.org/-/media/ACR/Files/Clinical-Resources/Contrast_Media.pdf">ACR Contrast Manual</a> into chunks. 2. Create embeddings for the chunks with the MedCPT Article Encoder. 3. Store the <code>chunk:embedding</code> pairs in a vector DB. 4. Set up a RAG Q&amp;A pipeline with the <code>LlamaIndex</code> framework. 5. Test out our RAG Q&amp;A pipeline to “chat” with the ACR Contrast Manual.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li>https://www.promptingguide.ai/techniques/rag</li>
<li>MedCPT ArXiv paper: https://arxiv.org/abs/2307.00589
<ul>
<li>MedCPT Article Encoder on Hugging Face: https://huggingface.co/ncbi/MedCPT-Article-Encoder</li>
</ul></li>
<li>LlamaIndex LLM Application Framework: https://docs.llamaindex.ai/en/stable/index.html
<ul>
<li>LlamaIndex <code>llama-cpp-python</code> Integration: https://docs.llamaindex.ai/en/stable/examples/llm/llama_2_llama_cpp.html</li>
</ul></li>
<li>Llama2-7B-Chat on Hugging Face: https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF</li>
</ul>
<div class="cell" data-cellview="form">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Installing required libraries</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown This cell will take approximately 4 minutes to run.&lt;br&gt;&lt;br&gt;When the cell finishes running the `Runtime` will be restarted. This will appear as an error saying that your session crashed for an unknown reason.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown &lt;br&gt;&lt;br&gt;Don't worry, this is expected. After the error shows up, simply run the next cell to proceed.</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>capture</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip uninstall numpy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install numpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>CMAKE_ARGS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-DLLAMA_CUBLAS=on"</span> FORCE_CMAKE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> pip install llama<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2.11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>force<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>reinstall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>upgrade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>no<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cache<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-10">    llama<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8.69</span>.post2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-11">    huggingface<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>hub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.19.3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-12">    transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.35.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-13">    pypdf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.17.1</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-16">os.kill(os.getpid(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Import the necessary libraries and functions</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> VectorStoreIndex, ServiceContext</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index.readers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PDFReader</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index.embeddings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HuggingFaceEmbedding</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index.llms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LlamaCPP</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index.llms.llama_utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> messages_to_prompt, completion_to_prompt</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Download the ACR Contrast Manual</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir pdfs</span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>qP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pdfs https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>www.acr.org<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/-/</span>media<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>ACR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Clinical<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Contrast_Media.pdf</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !wget -qP /content/pdfs https://www.acr.org/-/media/ACR/Files/Radiology-Safety/MR-Safety/Manual-on-MR-Safety.pdf</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Load the PDF</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">pdf_folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/pdfs"</span>)</span>
<span id="cb4-4">documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PDFReader().load_data(pdf_folder_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contrast_Media.pdf"</span>)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># documents = [PDFReader().load_data(pdf_folder_path/fn) for fn in list(pdf_folder_path.glob('**/*.pdf'))]</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="cfdb2230-305e-44b8-e674-825fe3521216">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Obtain our embedding model from Hugging Face Hub</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">embed_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HuggingFaceEmbedding(model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ncbi/MedCPT-Article-Encoder"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d9e29bd871944f9f8c64e7d525b9420d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4dbe63a7f70f42829090b4eec1a7f70d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a33087bbd6524b5992468b4cc38579dc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b92578c213a04f8cabeb4e479fe46529","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"892b4968d4f4476fb954746708b2401f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a646023fcdb349b79acef736429bb236","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28efc7546a0741198f180f40473c1f93","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="4981224f-d7c5-4937-f190-fb4b3cbd6f16">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title We'll be using the Llama-2-7B-Chat model via the Llama.cpp integration</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">model_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF/resolve/main/llama-2-7b-chat.Q4_K_M.gguf"</span></span>
<span id="cb6-4"></span>
<span id="cb6-5">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LlamaCPP(</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can pass in the URL to a GGML model to download it automatically</span></span>
<span id="cb6-7">    model_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_url,</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally, you can set the path to a pre-downloaded model instead of model_url</span></span>
<span id="cb6-9">    model_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb6-10">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb6-11">    max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,</span>
<span id="cb6-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># llama2 has a context window of 4096 tokens, but we set it lower to allow for some wiggle room</span></span>
<span id="cb6-13">    context_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kwargs to pass to __call__()</span></span>
<span id="cb6-15">    generate_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{},</span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kwargs to pass to __init__()</span></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to at least 1 to use GPU</span></span>
<span id="cb6-18">    model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_gpu_layers"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>},</span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform inputs into Llama2 format</span></span>
<span id="cb6-20">    messages_to_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages_to_prompt,</span>
<span id="cb6-21">    completion_to_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>completion_to_prompt,</span>
<span id="cb6-22">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-23">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading url https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGUF/resolve/main/llama-2-7b-chat.Q4_K_M.gguf to path /tmp/llama_index/models/llama-2-7b-chat.Q4_K_M.gguf
total size (MB): 4081.0</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>3892it [00:29, 130.81it/s]                          
AVX = 1 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | </code></pre>
</div>
</div>
<div class="cell" data-outputid="3de8008a-3b4a-45a5-c378-814aeb332ddc">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Create our `ServiceContext` to specify our custom embeddings and LLM</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown You can experiment with the `chunk_size` parameter to determine it's effect on inference speed and effective retrieval.</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">chunk_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"integer"}</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">service_context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ServiceContext.from_defaults(</span>
<span id="cb9-7">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>llm,</span>
<span id="cb9-8">    embed_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embed_model,</span>
<span id="cb9-9">    chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chunk_size</span>
<span id="cb9-10">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package punkt to /tmp/llama_index...
[nltk_data]   Unzipping tokenizers/punkt.zip.</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Create our `VectorStoreIndex` Query Engine from the PDF and our `ServiceContext`</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @markdown Another hyperparameter to experiment with is `similarity_top_k`. This is the number of chunks of text that will be retrieved from the `VectorStoreIndex` for each query.</span></span>
<span id="cb11-3">top_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"integer"}</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VectorStoreIndex.from_documents(</span>
<span id="cb11-6">    documents, service_context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>service_context</span>
<span id="cb11-7">)</span>
<span id="cb11-8"></span>
<span id="cb11-9">query_engine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index.as_query_engine(similarity_top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_k)</span></code></pre></div>
</div>
<div class="cell" data-outputid="68b29911-720e-4663-969c-2d1b467df0fd">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title Test our RAG Q&amp;A pipeline</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the GFR threshold below which IV contrast should be withheld in a patient with acute kidney injury?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context. Based on the updated information, there is no specific GFR threshold mentioned in the provided references that indicates when to withhold IV contrast in patients with acute kidney injury. However, it is suggested that if a threshold for CI-AKI risk is used at all, 30 mL/min/1.73m2 seems to be the one with the greatest level of evidence [96].
It is important to note that no serum creatinine or eGFR threshold is adequate to stratify risk for patients with AKI because serum creatinine in this setting is unreliable [134, 135]. Therefore, any threshold used must be weighed on an individual patient level with the benefits of administering contrast material.
In summary, while there is no specific GFR threshold mentioned in the provided references for withholding IV contrast in patients with acute kidney injury, a threshold of 30 mL/min/1.73m2 seems to be the most commonly cited and evidence-based recommendation. However, it is important to consider individual patient factors and the benefits of contrast material administration when making decisions regarding contrast use in patients with AKI.</code></pre>
</div>
</div>
<p>Play around with different queries and see how well the model responds.</p>
<p>You could even try different embedding models and LLMs available on Hugging Face.</p>
<div class="cell" data-cellview="form" data-outputid="da81812e-5aca-4273-aa1a-c7fb38a24264">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@title Test other questions</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@markdown Edit the text below and re-run the cell to try a different question.</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What considerations should I be aware of when giving IV contrast to a patient taking metformin?"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type:"string"}</span></span>
<span id="cb15-5">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(question)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit
Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context. Based on the new information provided, here is a refined answer to your original question:
When giving IV contrast to a patient taking metformin, it is essential to consider several factors to ensure safe and effective treatment. As an honest and respectful assistant, I must inform you that I cannot provide medical advice or make recommendations without proper training and qualifications. However, I can provide general information on the considerations that should be taken into account when administering IV contrast to a patient taking metformin.
Firstly, it is important to consult with a qualified medical professional who can assess the patient's individual risks and benefits of administering IV contrast. This includes discussing potential risks such as contrast-induced nephropathy, which may be more likely in patients with chronic kidney disease or those taking medications that affect kidney function, such as metformin.
Secondly, it is important to ensure that the patient is properly hydrated before and after administering IV contrast. This can help reduce the risk of contrast-induced nephropathy by minimizing the amount of contrast material that reaches the kidneys.
Thirdly, it may be beneficial to consider alternative imaging modalities that do not require the use of IV contrast, such as ultrasound or magnetic resonance imaging (MRI). These alternatives may be more appropriate for patients with renal impairment or those taking medications that affect kidney function.
Finally, it is important to monitor the patient's kidney function closely after administering IV contrast, particularly in patients with pre-existing renal disease or those taking medications that affect kidney function. This may involve regular monitoring of serum creatinine levels and other markers of kidney function.
In summary, when giving IV contrast to a patient taking metformin, it is essential to consult with a qualified medical professional who can assess the patient's individual risks and benefits of administering IV contrast. Proper hydration, consideration of alternative imaging modalities, and close monitoring of kidney function are also important factors to consider when administering IV contrast to patients with renal impairment or those taking medications that affect kidney function.
I hope this refined answer is helpful in addressing your query. If you have any further questions or concerns, please do not hesitate to</code></pre>
</div>
</div>
</section>
<section id="inspecting-the-retrieved-source-texts" class="level2">
<h2 class="anchored" data-anchor-id="inspecting-the-retrieved-source-texts">Inspecting the Retrieved Source Texts</h2>
<p>Sometimes, it can be helpful to see what source texts were provided as context for the LLM to answer your query. This can help in troubleshooting and determining whether to increase the number of texts retrieved for each query.</p>
<div class="cell" data-outputid="ef664b32-75e4-4da7-834a-fe2bb6315f72">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Should metformin be discontinued when giving IV gadolinium-based contrast?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span>
<span id="cb18-3">sources <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.get_formatted_sources(length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb18-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sources)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Based on the provided context information, there is no clear indication to discontinue metformin before administering IV gadolinium-based contrast. The American College of Radiology (ACR) Manual on Contrast Media states that "there is no evidence to suggest that metformin should be discontined prior to administration of gadolinium" (p. 53). In fact, the ACR recommends that patients with chronic kidney disease (CKD) who are receiving metformin and require IV contrast should continue their medication unless there are contraindications or significant interactions (ACR Manual on Contrast Media, p. 53).
It is important to note that the risk of contrast-induced nephropathy (CIN) in patients with CKD is highly dependent on the degree of kidney dysfunction and the amount of contrast used. Therefore, it is crucial to carefully evaluate each patient's individual risks and benefits before administering IV contrast.
In summary, based on the provided context information, there is no clear indication to discontinue metformin before administering IV gadolinium-based contrast. Patients with CKD who are receiving metformin should continue their medication unless there are contraindications or significant interactions, and their individual risks and benefits should be carefully evaluated before administering IV contrast.
&gt; Source (Doc id: 063f642c-45d8-45d5-a037-a81418c976c0): Preface&nbsp;
2&nbsp;
 
 
  
 
  
 
 
 
ACR Manual 
On 
Contrast Media  
 
 
2023 
 
 
 
ACR Committee  
on   
                Drugs and  Contrast Media

&gt; Source (Doc id: 904d37ad-2103-4d5c-a3b8-592dee3932c1): ACR Manual on Contrast 
Media  
 
 
2023  
 
ACR Committee on 
Drugs  and Contrast 
Media  
 
 
  
 
 
 
  
 
 
 
 
    
 
 
© Copyright 2023 American College of Radiology ISBN: 978-1-55903-012-0

&gt; Source (Doc id: 5ecab8fe-8373-4f36-9bbf-554371400d4e): CONTRAST-ASSOCIATED ACUTE KIDNEY INJURY AND CONTRAST-INDUCED ACUTE KIDNEY INJURY IN ADULTS  50 &nbsp;90.&nbsp; Merten&nbsp;GJ,&nbsp;Burgess&nbsp;WP,&nbsp;Gray&nbsp;LV,&nbsp;et&nbsp;al.&nbsp;Prevention &nbsp;of&nbsp;contrast‐induced&nbsp;nephropathy &nbsp;with&nbsp;sodium&nbsp;bicarbonate: &nbsp;a&nbsp;randomized &nbsp;
controlled &nbsp;trial.&nbsp;Jama&nbsp;2004;291:2328 ‐34.&nbsp;
91.&nbsp; Navaneethan &nbsp;SD,&nbsp;Singh&nbsp;S,&nbsp;Appasamy &nbsp;S,&nbsp;Wing&nbsp;RE,&nbsp;Sehgal&nbsp;AR.&nbsp;Sodium&nbsp;bicarbonate &nbsp;therapy&nbsp;for&nbsp;prevention &nbsp;of&nbsp;contrast‐induced&nbsp;
nephropathy: &nbsp;a&nbsp;systematic &nbsp;review&nbsp;and&nbsp;meta‐analysis.&nbsp;American &nbsp;journal&nbsp;of&nbsp;kidney&nbsp;diseases&nbsp;:&nbsp;the&nbsp;official&nbsp;journal&nbsp;of&nbsp;the&nbsp;National&nbsp;
Kidney&nbsp;Foundation &nbsp;2009;53:617 ‐27.&nbsp;
92.&nbsp; Taylor&nbsp;AJ,&nbsp;Hotchkiss &nbsp;D,&nbsp;Morse&nbsp;RW,&nbsp;McCabe&nbsp;J.&nbsp;PREPARED: &nbsp;Preparation &nbsp;for&nbsp;Angiography &nbsp;in&nbsp;Renal&nbsp;Dysfunction: &nbsp;a&nbsp;randomized &nbsp;trial&nbsp;of&nbsp;
inpatient&nbsp;vs&nbsp;outpatient &nbsp;hydration &nbsp;protocols &nbsp;for&nbsp;cardiac&nbsp;catheterization &nbsp;in&nbsp;mild‐to‐moderate &nbsp;renal&nbsp;dysfunction. &nbsp;Chest&nbsp;
1998;114:1570 ‐4.&nbsp;
93.&nbsp; Zoungas&nbsp;S,&nbsp;Ninomiya &nbsp;T,&nbsp;Huxley&nbsp;R,&nbsp;et&nbsp;al.&nbsp;Systematic &nbsp;review:&nbsp;sodium&nbsp;bicarbonate &nbsp;treatment &nbsp;regimens &nbsp;for&nbsp;the&nbsp;prevention &nbsp;of&nbsp;
contrast‐induced&nbsp;n...</code></pre>
</div>
</div>
<section id="troubleshooting-rag" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting-rag">Troubleshooting RAG</h3>
<p>Some of the issues that can arise with the approach implemented above include: - Sources with a lot of white space - Header/footer material that isn’t very useful - Irrelevant sources</p>
<p>Retrieval via nearest neighbor approaches with embeddings are imperfect. Some additional techniques you can try to make your RAG approach more robust include: - Data cleaning prior to embedding and input into the vector database - Re-ranking after retrieval - Sentence-window retrieval - Auto-merging retrieval</p>
<p>To learn more about these methods, see the following free course from DeepLearning.ai: https://www.deeplearning.ai/short-courses/building-evaluating-advanced-rag/</p>
</section>
</section>
<section id="more-test-queries" class="level2">
<h2 class="anchored" data-anchor-id="more-test-queries">More Test Queries</h2>
<div class="cell" data-outputid="d509f0ef-ad33-4b8c-a807-de7e676f1912">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are some of the concerns regarding children and IV contrast?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Based on the provided context, here are some concerns regarding children and IV contrast:
1. Acute reactions to contrast media in children can be severe and require immediate medical attention.
2. Children are at a higher risk for extravasation-related complications due to their smaller body size and immature circulatory system.
3. The signs and symptoms of extravasation can be subtle and may not always be obvious, making it crucial to closely monitor children during and after contrast media injection.
4. Children with underlying medical conditions or those who are severely ill or debilitated are at a higher risk for complications from contrast media extravasation.
5. The choice of injection site can affect the risk of extravasation, and certain sites (e.g., hand, wrist, foot, and ankle) may be more prone to complications.
6. Injection rates may also play a role in the risk of extravasation, with higher flow rates potentially increasing the likelihood of complications.
7. Children who are unable to communicate effectively (e.g., infants, young children, and elderly patients) may be at a higher risk for extravasation due to their limited ability to express any discomfort or pain.
8. Women may also have a mild increased risk of extravasation compared to men.
9. Some conditions, such as altered circulation or prior radiation therapy, can increase the risk of complications from contrast media extravasation in children.
10. It is essential to follow proper injection techniques and guidelines to minimize the risk of complications in children undergoing IV contrast media injection.</code></pre>
</div>
</div>
<div class="cell" data-outputid="cb7bf06b-7420-4308-d6f8-71f58ed2ed25">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When should surgical consultation be obtained after contrast extravasation?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit
Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context. Based on the updated information, when should surgical consultation be obtained after contrast extravasation?
Surgical consultation should be obtained urgently when there is concern for a severe extravasation injury, such as:
* Severe pain that persists or worsens over time
* Progressive swelling or pain that cannot be controlled with elevation or other measures
* Altered tissue perfusion as evidenced by decreased capillary refill, which can indicate ischemia or necrosis
* Change in sensation in the affected limb, such as numbness or tingling
* Worsening passive or active range of motion, which can indicate muscle or nerve damage
* Skin ulceration or blistering, which can indicate infection or necrosis

It is important to closely monitor the patient and seek surgical consultation if any of these signs or symptoms develop. While some interventions such as warm or cold compresses may be helpful in managing symptoms, there is no clear evidence favoring one over the other, and aspiration of the extravasated contrast medium is not recommended. Topical application of silver sulfadiazine ointment and steroid cream may be useful in soothing irritated skin and preventing infection, but its efficacy is unknown. Hyaluronidase has been used in the management of unrelated medication extravasations, but there is no adequate evidence to support its use after contrast material extravasation.
In summary, surgical consultation should be obtained urgently when there are signs of a severe extravasation injury, and close monitoring and prompt intervention are crucial to prevent long-term complications.</code></pre>
</div>
</div>
<div class="cell" data-outputid="e5fde855-0d26-47a6-b67f-e7808b80f263">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can I power-inject contrast into a PICC line?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit
Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context. Based on the updated information, the answer to the query remains the same as the original answer. Power-injecting contrast into a PICC line is not recommended due to the risk of tip migrations and other complications. It is important to follow manufacturer recommendations and only use power injection through certified port sites. Mechanical injections can be performed through some pressure-injectable peripherally inserted central catheters (PICCs), but it is crucial to ensure that the port site is certified as power-injectable before using a central venous line for power injection.
Therefore, the answer to the query remains: No, you should not power-inject contrast into a PICC line.</code></pre>
</div>
</div>
<div class="cell" data-outputid="81f5e3f7-7b6a-4647-d465-8d6cc737f355">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When should kidney function be checked prior to giving iodinated contrast?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit
Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context! Based on the new information provided, the recommended interval for checking kidney function prior to giving iodinated contrast may vary depending on the individual patient's risk factors and medical history. In general, it is suggested to check kidney function in patients who have a new risk factor or heightened risk of renal dysfunction, such as those with a history of kidney disease, diabetes, or heart failure, within 30 days to 1 week prior to giving iodinated contrast. However, for patients who are taking medications that can affect kidney function, such as non-steroidal anti-inflammatory drugs (NSAIDs) or corticosteroids, it is recommended to check kidney function more frequently, ideally within 24 hours of administering these medications. Additionally, patients who have a history of contrast-induced nephropathy or acute kidney injury may require more frequent monitoring of their kidney function, typically every 1-2 days for the first week after administration of iodinated contrast. It is important to consult with a healthcare professional for specific guidance on when to check kidney function prior to administering iodinated contrast based on individual patient factors.</code></pre>
</div>
</div>
<div class="cell" data-outputid="3b14c3a5-4425-46ad-8b68-d981f2143029">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_engine.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In what situations should kidney function be checked prior to iodinated contrast?"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Llama.generate: prefix-match hit
Llama.generate: prefix-match hit</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>  Thank you for providing additional context! Based on the updated information, it is important to check kidney function before administering iodinated contrast in situations where there are new risk factors or a new risk of renal dysfunction, such as inpatients or those with pre-existing kidney disease. It is also recommended to assess kidney function in patients taking medications that can affect the kidneys, such as non-steroidal anti-inflammatory drugs (NSAIDs).
In summary, the refined answer is:
Kidney function should be checked prior to administering iodinated contrast in the following situations:
1. New risk factors or a new risk of renal dysfunction: If a patient has recently developed new risk factors for contrast-induced nephropathy, such as diabetes, hypertension, or a history of kidney disease, it may be prudent to assess their kidney function before administering iodinated contrast.
2. Inpatients: Inpatients are at a higher risk for contrast-induced nephropathy compared to outpatients. Therefore, it is recommended to check kidney function before administering iodinated contrast in this population.
3. Those with a heightened risk of renal dysfunction: Patients with pre-existing kidney disease or those taking medications that can affect the kidneys, such as NSAIDs, should have their kidney function checked before administering iodinated contrast.
It is important to note that these are general guidelines and the specific risk factors and assessment protocols may vary depending on individual patient circumstances and medical center policies. It is always best to consult with a qualified healthcare professional for personalized advice.</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://radml.wfwiggins.com/posts/ACR_contrast_manual_chat.html</guid>
  <pubDate>Wed, 12 Jun 2024 01:37:14 GMT</pubDate>
</item>
<item>
  <title>Image Classification for Beginners</title>
  <link>https://radml.wfwiggins.com/posts/Image_Classification_Tutorial.html</link>
  <description><![CDATA[ 




<p><a href="https://colab.research.google.com/github/wfwiggins/rad-ml-tutor/blob/master/Image_Classification_Tutorial.ipynb" target="_parent"><img src="https://radml.wfwiggins.com/posts/https:/colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://radml.wfwiggins.com/posts/https:/github.com/wfwiggins/RSNA-Image-AI-2020/blob/master/images/RSNA-2020-logo-with-dates.gif?raw=true" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">RSNA logo</figcaption>
</figure>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this demonstration, we will utilize techniques of <em>computer vision</em>, including deep <em>convolutional neural networks</em> (CNNs), to train an image classifier model capable of classifying radiographs as either <strong>chest</strong> or <strong>abdominal</strong>.</p>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<p>We will utilize the <a href="https://docs.fast.ai/">fast.ai v2 library</a>, written primarily by Jeremy Howard and Sylvain Gugger (with help from many others). It is written in the <a href="https://www.python.org/">Python programming language</a> and built on top of the <a href="https://www.pytorch.org/">PyTorch deep learning library</a>.</p>
<p>The demonstration in this notebook relies heavily on examples from the <code>fast.ai</code> book, <em>Deep Learning for Coders with fastai and PyTorch: AI Applications without a PhD</em> by Jeremy Howard and Sylvain Gugger, which was written entirely in Jupyter notebooks, which are <a href="https://github.com/fastai/fastbook">freely available for download on GitHub</a>. A print copy of the book can be purchased from Amazon.</p>
</section>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<p>This work is adapted from “<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5959832/">Hello World Deep Learning in Medical Imaging</a> {% fn 1 %}”. The chest and abdominal radiographs were obtained from <a href="https://github.com/paras42/Hello_World_Deep_Learning/tree/9921a12c905c00a88898121d5dc538e3b524e520">Paras Lakhani’s GitHub repository</a>.</p>
<p>{{ “<em>Reference:</em> Lakhani P, Gray DL, Pett CR, Nagy P, Shih G. Hello World Deep Learning in Medical Imaging. J Digit Imaging. 2018 Jun; 31(3):283-289. Published online 2018 May 3. doi: 10.1007/s10278-018-0779-6” | fndetail: 1 }}</p>
</section>
<section id="developers" class="level3">
<h3 class="anchored" data-anchor-id="developers">Developers</h3>
<ul>
<li>Walter F. Wiggins, MD, PhD - Duke University Hospital, Durham, NC, USA</li>
<li>Kirti Magudia, MD, PhD, - University of California, San Francisco, CA, USA</li>
<li>M. Travis Caton, MD, PhD - University of California, San Francisco, CA, USA</li>
</ul>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Other versions of this notebook implemented on the <a href="https://www.kaggle.com/wfwiggins203/hello-world-for-deep-learning-siim">Kaggle Notebooks platform</a> were presented at the 2019 Society for Imaging Informatics in Medicine (SIIM) Annual Meeting and for the American College of Radiology (ACR) Residents &amp; Fellows Section (RFS) <a href="https://www.acr.org/Member-Resources/rfs/Journal-Club">AI Journal Club</a>.</p>
<p>We would also like to acknowledge the following individuals for inspiring our transition to the Google Colab platform with their excellent notebook from the 2019 RSNA AI Refresher Course: - Luciano M. Prevedello, MD, PhD - Felipe C. Kitamura, MD, MSc - Igor Santos, MD - Ian Pan, MD</p>
</section>
</section>
<section id="system-setup-downloading-the-data" class="level2">
<h2 class="anchored" data-anchor-id="system-setup-downloading-the-data">System Setup &amp; Downloading the Data</h2>
<blockquote class="blockquote">
<p>Important: Save a copy of this notebook in your Google Drive folder by selecting <em>Save a Copy in Drive</em> from the <em>File</em> menu in the top left corner of this page. This will allow you to modify the cells and save your results.</p>
</blockquote>
<p><br></p>
<blockquote class="blockquote">
<p>Warning: Make sure you have the <em>runtime type</em> set to <strong>“GPU”</strong>. See GIF below.</p>
</blockquote>
<p><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://radml.wfwiggins.com/posts/https:/github.com/wfwiggins/RSNA-Image-AI-2020/blob/master/images/set-runtime-type.gif?raw=true" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Set Runtime to GPU</figcaption>
</figure>
</div>
<section id="setting-up-the-runtime-environment" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-the-runtime-environment">Setting up the runtime environment…</h3>
<p>Running the following cell in Colab will install the necessary libraries, download the data and restart the session.</p>
<blockquote class="blockquote">
<p>Warning: This will generate an error message, which we can safely ignore 😉.</p>
</blockquote>
<p>::: {.cell _uuid=‘0c1e51dbcbe223c29555c5188b0df55b10ed8b06’ cellView=‘form’}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install fastai<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1.4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>null</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install fastcore<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>null</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># **Downloading the data...**</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wfwiggins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>RSNA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>AI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>blob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>master<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>?raw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true</span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p data</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>unzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>?raw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>null</span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>?raw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true</span>
<span id="cb1-12"></span>
<span id="cb1-13">os.kill(os.getpid(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<p>:::</p>
</section>
</section>
<section id="exploring-the-data" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-data">Exploring the Data</h2>
<p>Let’s take a look at the directory structure and contents, then create some variables to help us as we proceed.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-3">warnings.simplefilter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-6">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
</div>
<p>::: {.cell _uuid=‘4cfcb87c72a542aefce13f8453097c0d1eb0c7b9’ cellView=‘form’ outputId=‘c18af866-27cb-4f1b-b4a9-7e76ce8456e2’ execution_count=2}</p>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.basics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set path variable to the directory where the data is located</span></span>
<span id="cb3-5">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/data'</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Command line "magic" command to show directory contents</span></span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls {path}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**/*</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/content/data/test/abd:
abd_test.png

/content/data/test/chest:
chest_test.png

/content/data/train/abd:
abd0.png   abd14.png  abd19.png  abd23.png  abd28.png  abd3.png  abd8.png
abd10.png  abd15.png  abd1.png   abd24.png  abd29.png  abd4.png  abd9.png
abd11.png  abd16.png  abd20.png  abd25.png  abd2.png   abd5.png
abd12.png  abd17.png  abd21.png  abd26.png  abd30.png  abd6.png
abd13.png  abd18.png  abd22.png  abd27.png  abd31.png  abd7.png

/content/data/train/chest:
chst33.png  chst39.png  chst45.png  chst51.png  chst57.png  chst63.png
chst34.png  chst40.png  chst46.png  chst52.png  chst58.png  chst64.png
chst35.png  chst41.png  chst47.png  chst53.png  chst59.png  chst65.png
chst36.png  chst42.png  chst48.png  chst54.png  chst60.png
chst37.png  chst43.png  chst49.png  chst55.png  chst61.png
chst38.png  chst44.png  chst50.png  chst56.png  chst62.png

/content/data/val/abd:
abd0.png  abd1.png  abd2.png  abd3.png  abd4.png

/content/data/val/chest:
chst0.png  chst1.png  chst2.png  chst3.png  chst4.png</code></pre>
</div>
<p>:::</p>
<p>As you can see, the <code>data</code> directory contains subdirectories <code>train</code>, <code>val</code> and <code>test</code>, which contain the <em>training</em>, <em>validation</em> and <em>test</em> data for our experiment. <code>train</code> and <code>val</code> contain subdirectories <code>abd</code> and <code>chest</code> containing abdominal and chest radiographs for each data set. There are 65 training images and 10 validation images with <em>balanced distributions</em> over our <em>target classes</em> (i.e.&nbsp;approximately equal numbers of abdominal and chest radiographs in each data set and optimized for a classification problem).</p>
</section>
<section id="model-training-setup" class="level2">
<h2 class="anchored" data-anchor-id="model-training-setup">Model Training Setup</h2>
<p>Before we train the model, we have to get the data in a format such that it can be presented to the model for training.</p>
<section id="data-loaders" class="level3">
<h3 class="anchored" data-anchor-id="data-loaders">Data Loaders</h3>
<p>The first step is to load the data for the training and validation datasets into a <code>ImageDataLoaders</code> object from the <code>fastai</code> library. When training a model, the <code>ImageDataLoaders</code> will present training - and subsequently, validation - data to the model in <em>batches</em>.</p>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>In order to be sure that the model isn’t simply “memorizing” the training data, we will <em>augment</em> the data by randomly applying different <em>transformations</em> to each image before it is sent to the model.</p>
<p>Transformations can include rotation, translation, flipping, rescaling, etc.</p>
</section>
<section id="load-the-data-into-imagedataloaders-with-data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="load-the-data-into-imagedataloaders-with-data-augmentation">Load the data into <code>ImageDataLoaders</code> with data augmentation</h3>
<blockquote class="blockquote">
<p>Note: When you run this next cell in Colab, a batch of data will be shown with or without augmentation transforms applied. (1) Run this cell once with the box next to <code>apply_transforms</code> unchecked to see a sample of the original images. (2) Next, run the cell a few more times after checking the box next to <code>apply_transforms</code> to see what happens to the images when the transforms are applied.</p>
</blockquote>
<p>::: {.cell _uuid=‘d1c24e4a78f57f12a42de3481db746fe0f170ee3’ cellView=‘form’ outputId=‘ba44aa2d-d8f1-40b2-e9ef-64500483f516’ execution_count=3}</p>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the following line of code utilizes Colab Forms</span></span>
<span id="cb5-2">apply_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type: 'boolean'}</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> apply_transforms:</span>
<span id="cb5-5">    flip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-6">    max_rotate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb5-7">    max_warp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb5-8">    p_affine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span></span>
<span id="cb5-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-10">    flip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-11">    max_rotate, max_warp, p_affine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aug_transforms(</span>
<span id="cb5-14">    do_flip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>flip,</span>
<span id="cb5-15">    max_rotate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_rotate,</span>
<span id="cb5-16">    max_warp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_warp,</span>
<span id="cb5-17">    p_affine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_affine,</span>
<span id="cb5-18">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,</span>
<span id="cb5-19">    min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span></span>
<span id="cb5-20">)</span>
<span id="cb5-21">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path, valid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">460</span>), batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tfms, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb5-22">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
<p>:::</p>
</section>
<section id="find-the-optimal-learning-rate" class="level3">
<h3 class="anchored" data-anchor-id="find-the-optimal-learning-rate">Find the optimal learning rate</h3>
<p>The learning rate is a hyperparameter that controls how much your model adjusts in response to percieved error after each training epoch. Choosing an optimal learning rate is an optimal step in model training.</p>
<p>From the <code>fastai</code> <a href="https://docs.fast.ai/callback.schedule#Learner.lr_find">docs</a>: &gt; First introduced by Leslie N. Smith in <a href="https://arxiv.org/pdf/1506.01186.pdf">Cyclical Learning Rates for Training Neural Networks</a>, the <code>LRFinder</code> trains the model with exponentially growing learning rates and stops in case of divergence. &gt; The losses are then plotted against the learning rates with a log scale. <br><br> &gt; A good value for the learning rates is then either: &gt; - 1/10th of the minimum before the divergence &gt; - where the slope is the steepest</p>
<p><br></p>
<blockquote class="blockquote">
<p>Note: When you run this cell for the first time in a Colab session, it will download a pretrained version of the model to your workspace before running the <code>LRFinder</code>.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="ac4ee915-029c-43a0-a02a-0bdc5a41d5e9" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path, valid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">460</span>), batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb6-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span>
<span id="cb6-3">learn.lr_find()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet18-5c106cde.pth" to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"42e792826caa4935b7adbf5432268259","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-6-output-5.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="transfer-learning" class="level2">
<h2 class="anchored" data-anchor-id="transfer-learning">Transfer Learning</h2>
<p>Deep learning requires large amounts of training data to successfully train a model.</p>
<p>When we don’t have enough data to work with for the planned task, starting with a <em>pre-trained</em> network that has been optimally trained on another task can be helpful. The concept of re-training a pre-trained network for a different task is called <em>transfer learning</em>.</p>
<section id="fine-tuning" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning">Fine-tuning</h3>
<p>In the process of re-training the model, we start by changing the final layers of the network to define the output or predictions our model will make. In order to avoid propagating too much error through the rest of the network during the initial training, we freeze the other layers of the network for the first cycle or <em>epoch</em> of training. Next, we open up the rest of the network for training and train for a few more <em>epochs</em>. This process is called <em>fine-tuning</em>.</p>
</section>
<section id="epochs-and-data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="epochs-and-data-augmentation">Epochs and data augmentation</h3>
<p>During each epoch, the model will be exposed to the entire dataset. Each batch of data will have our data transformations randomly applied in order to provide data augmentation. This helps to ensure that our model never sees the exact same image twice. This is important because we wouldn’t want our model to simply memorize the training dataset and not converge on a generalized solution, resulting in poor performance on the validation dataset.</p>
</section>
<section id="the-loss-function" class="level3">
<h3 class="anchored" data-anchor-id="the-loss-function">The loss function</h3>
<p>In a classification task, you’re either right or wrong. This binary information doesn’t give us much nuance to work with when training a model. A <em>loss function</em> give us a numeric estimation of “how wrong” our model is. This gives us a target to optimize during the training process.</p>
<p>When reviewing the results of successive epochs in training, the loss on your validation dataset should always be <strong>decreasing</strong>. When it starts to increase, that is a sign of your model <em>overfitting</em> to the training dataset.</p>
</section>
<section id="fine-tuning-the-model" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the model</h3>
<p>We will fine-tune our model to our task in the following steps: 1. Select the number of epochs for which we will train the model 2. Choose a base learning rate based on the results from the <code>LRFinder</code> plot above 3. Run the cell to initiate model training utilizing the <code>fine_tune()</code> method from <code>fastai</code></p>
<blockquote class="blockquote">
<p>Tip: If you’re running this notebook in Colab, you can re-run this cell with different hyperparameters to better understand how they affect the result.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="89822ba0-4618-49a4-fd53-51080a6e35b6" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the following lines of code utilize Colab Forms</span></span>
<span id="cb9-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type: "integer"}</span></span>
<span id="cb9-3">base_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type: "number"}</span></span>
<span id="cb9-4"></span>
<span id="cb9-5">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span>
<span id="cb9-6">learn.fine_tune(epochs, base_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base_lr)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.106555</td>
<td>1.336308</td>
<td>0.500000</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.124234</td>
<td>0.632943</td>
<td>0.700000</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.175012</td>
<td>0.107626</td>
<td>0.900000</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.129196</td>
<td>0.022088</td>
<td>1.000000</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.100126</td>
<td>0.012920</td>
<td>1.000000</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.078639</td>
<td>0.012502</td>
<td>1.000000</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="review-training-curves" class="level3">
<h3 class="anchored" data-anchor-id="review-training-curves">Review training curves</h3>
<p>The visual representation of the training and validation losses are useful to evaluate how successfully you were able to train your model. You should see the validation loss continuously decreasing over subsequent batches.</p>
<blockquote class="blockquote">
<p>Important: If the validation loss begins to increase, your model may be starting to <strong>overfit</strong>. Consider restarting your training experiment with one fewer epochs than it took to overfit.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="a3411085-9533-4141-81bf-d24565eb9589" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">learn.recorder.plot_loss()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="testing-the-model" class="level2">
<h2 class="anchored" data-anchor-id="testing-the-model">Testing the Model</h2>
<section id="test-the-model-on-the-test-dataset" class="level3">
<h3 class="anchored" data-anchor-id="test-the-model-on-the-test-dataset">Test the model on the test dataset</h3>
<p>When you run the following cell, the first line shows the groundtruth for whether the radiograph is of the chest or abdomen. The second line is the model prediction for whether the image is a chest or abdominal radiograph.</p>
<div class="cell" data-cellview="form" data-outputid="66f872dc-26e8-43bf-cb9b-b9cab0914e14" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">test_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>)</span>
<span id="cb11-2">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(test_files, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-3">learn.show_results(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dl)</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="a-little-more-detail-on-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="a-little-more-detail-on-the-predictions">A little more detail on the predictions</h3>
<p>Running this cell will provide us with the loss on each image, as well as the model’s predicted probability, which can be thought of as the model’s confidence in its prediction.</p>
<blockquote class="blockquote">
<p>Note: If the model is correct and completely confident, the loss should be near “0.00” and the probability will be “1.00”, respectively.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="7b16f268-b1a0-4b01-fe36-88ddd68482d5" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn, dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dl)</span>
<span id="cb12-2">interp.plot_top_losses(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="test-the-model-on-a-surprise-example" class="level3">
<h3 class="anchored" data-anchor-id="test-the-model-on-a-surprise-example">Test the model on a surprise example</h3>
<p>Here, we present the model with an unexpected image (an elbow radiograph) and see how it responds.</p>
<div class="cell" data-cellview="form" data-outputid="0499f468-e5ce-4f12-e985-73bc8eca8358" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path, recurse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-2">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(y)</span>
<span id="cb13-3">x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(test_dl)</span>
<span id="cb13-4">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dl, with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-5">x_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorImage(dls.train.decode((x,))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb13-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb13-7">fig.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prediction / Probability'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>)</span>
<span id="cb13-8">x_dec.show(ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb13-9">ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>vocab[res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> / </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>When presented with this radiograph of an elbow, the model makes a prediction but is less confident than with the other test images.</p>
<blockquote class="blockquote">
<p>Important: (1) A deep learning classification model <em>can only learn what we teach it to learn</em>.</p>
</blockquote>
<blockquote class="blockquote">
<p>Important: (2) In designing our model implementation, we might consider designing a pre-processing step in which the data (or metadata) is checked to ensure the input to the model is valid.</p>
</blockquote>
</section>
</section>
<section id="visualizing-model-inferences" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-model-inferences">Visualizing Model Inferences</h2>
<section id="class-activation-map-cam" class="level3">
<h3 class="anchored" data-anchor-id="class-activation-map-cam">Class activation map (CAM)</h3>
<p>CAM allows one to visualize which regions of the original image are heavily weighted in the prediction of the corresponding class. This technique provides a visualization of the activations in the <strong>final</strong> <em>convolutional</em> block of a Convolutional Neural Network (CNN).</p>
<p>CAM can also be useful to determine if the model is “cheating” and looking somewhere it shouldn’t be to make its prediction (i.e.&nbsp;radioopaque markers placed by the technologist).</p>
<blockquote class="blockquote">
<p>Note: If you are running this cell in Colab, choose which of the two test images you would like to examine and run this cell to see the CAM output overlayed on the input image.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="628b3b94-c82d-4496-fa48-f0695d78177a" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">test_case <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chest'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param ['abd', 'chest']</span></span>
<span id="cb14-2">cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_case <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abd'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-3">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_case</span>
<span id="cb14-4"></span>
<span id="cb14-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>label)</span>
<span id="cb14-6">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(y, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-7"></span>
<span id="cb14-8">hook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook_output(learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb14-9">x, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(test_dl)</span>
<span id="cb14-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()(x)</span>
<span id="cb14-11">act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook.stored[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-12">cam_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ck,kij-&gt;cij'</span>, learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight, act)</span>
<span id="cb14-13">x_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorImage(dls.train.decode((x,))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb14-14">_, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb14-15">x_dec.show(ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb14-16">ax.imshow(cam_map[cls].detach().cpu(), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, extent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb14-17">              interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magma'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-18">hook.remove()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="grad-cam" class="level3">
<h3 class="anchored" data-anchor-id="grad-cam">Grad-CAM</h3>
<p>Gradient-weighted CAM (Grad-CAM) allows us to visualize the output from <em>any convolutional block</em> in a CNN.</p>
<p>By default, this cell is setup to show the Grad-CAM output from the final convolutional block in the CNN, for comparison to the CAM output.</p>
<blockquote class="blockquote">
<p>Note: If you’re running this notebook in Colab, (1) choose which of the two test images you would like to examine and run this cell to see the Grad-CAM output overlayed on the input image, then (2) select a <em>different</em> block and re-run the cell to see how the output changes for different blocks in the network.</p>
</blockquote>
<div class="cell" data-cellview="form" data-outputid="be4fe3eb-4860-428f-ab08-99877b542c51" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">test_case <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abd'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param ['abd', 'chest']</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">cls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_case <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abd'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-4">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_case</span>
<span id="cb15-5"></span>
<span id="cb15-6">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>label)</span>
<span id="cb15-7">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(y, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-8">x, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(test_dl)</span>
<span id="cb15-9">mod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-10"></span>
<span id="cb15-11">block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#@param {type: "slider", min: -8, max: -1, step: 1}</span></span>
<span id="cb15-12"></span>
<span id="cb15-13">hook_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> m,i,o: o[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().clone()</span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Hook(mod[block], hook_func, is_forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hookg:</span>
<span id="cb15-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> Hook(mod[block], hook_func) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hook:</span>
<span id="cb15-17">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()(x.cuda())</span>
<span id="cb15-18">        act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook.stored</span>
<span id="cb15-19">    output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, cls].backward()</span>
<span id="cb15-20">    grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hookg.stored</span>
<span id="cb15-21"></span>
<span id="cb15-22">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grad[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].mean(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-23">cam_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> act[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-24">x_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorImage(dls.train.decode((x,))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb15-25">_, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb15-26">x_dec.show(ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb15-27">ax.imshow(cam_map.detach().cpu(), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, extent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb15-28">              interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magma'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://radml.wfwiggins.com/posts/Image_Classification_Tutorial_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://radml.wfwiggins.com/posts/Image_Classification_Tutorial.html</guid>
  <pubDate>Wed, 12 Jun 2024 01:37:14 GMT</pubDate>
</item>
</channel>
</rss>
